version: '3.8'
services:
  auth:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
  user:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3001"]
      interval: 10s
      timeout: 5s
      retries: 5
  email:
    build:
      context: ./email-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3002"]
      interval: 10s
      timeout: 5s
      retries: 5
  interface:
    build:
      context: ./interface-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    # network_mode: "host"
    depends_on:
      email:
        condition: service_healthy
      user:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
  db:
    image: postgres:13
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - ./database/up.sql:/docker-entrypoint-initdb.d/up.sql
    environment:
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  shelter:
    build:
      context: ./shelter-service
      dockerfile: Dockerfile
    # command: bundle exec bin/rails s -p 3000 -b '0.0.0.0'
    volumes:
      - .:/shelter-service
    ports:
      - "3006:3006"
    depends_on:
      - db
  nginx-proxy:
    container_name: nginx-proxy
    build:
      context: ./nginx
    volumes:
      - /etc/nginx/vhost.d
      - /etc/acme.sh
      - /usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    ports:
      - '80:80'
    restart: unless-stopped
volumes:
  postgresql-data:
    driver: local